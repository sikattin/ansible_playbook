---

- name: "Provisioning GameServer"
  block:
    - name: "Install required packages for df_game"
      block:
        - name: "Install epel repo for Amazon Linux"
          shell: amazon-linux-extras install -y epel
          when: ansible_distribution == 'Amazon'
          
        - name: "Install epel repo for RHEL/CentOS"
          yum:
            name: "https://dl.fedoraproject.org/pub/epel/epel-release-latest-{{ ansible_distribution_major_version }}.noarch.rpm"
            state: latest
          when: ansible_distribution == 'CentOS' or ansible_distribution == 'RedHat' or ansible_distribution == 'Fedora'
          
        - name: "Install required packages via yum package manager"
          yum:
            name: "{{ item }}"
            state: latest
          loop:
            - "unixODBC"
            - "ncftp"
            - "svn"
            - "freetds"
            - "freetds-devel"
          when: ansible_distribution != "Ubuntu" or ansible_distribution != "Debian"
  
        - name: "Install required packages via apt package manager"
          apt:
            name: "{{ item }}"
            state: latest
          loop:
            - "unixODBC"
            - "ncftp"
            - "svn"
            - "freetds"
            - "freetds-devel"
          when: ansible_distribution == "Ubuntu" or ansible_distribution == "Debian"
      tags: install_packages
      
    - name: manage user accounts
      block:
        - name: include credential vars file
          include_vars:
            file: vault_encrypted.yml

        - name: create group
          group:
            name: "{{ item.name  }}"
            gid: "{{ item.gid }}"
            state: present
          loop: "{{ group }}"
          
        - name: create users
          user:
            name: "{{ item.name }}"
            shell: /bin/bash
            group: "{{ item.group }}"
            uid: "{{ item.uid | default(501) }}"
          loop: "{{ users }}"
      
        - name: "set password for users"
          user:
            name: "{{ item.key }}"
            password: "{{ item.value | password_hash('sha512') }}"
            update_password: always
          with_dict: "{{ user_password }}"
      tags: user_settings
      
    - name: cron settings
      block:
        - name: create entries in crontab
          cron:
            name: "Check GameServerChannels"
            minute: "*/10"
            job: "/bin/bash /home/arad/game/mng_script/channel_check/channel_check.sh"
            user: "{{ game_libdir.owner }}"
            
        - name: create entries in crontab
          cron:
            name: "Maintenance announcement"
            minute: "21"
            hour: "05"
            day: "04"
            month: "09"
            job: "/bin/bash /home/arad/game/mng_script/start_maintenance.sh 5:50"
            user: "{{ game_libdir.owner }}"
            disabled: yes
      tags: cron_settings
      
    - name: df_game settings
      block:
        - name: create df_game lib directory
          file:
             path: "{{ game_libdir.path }}"
             owner: "{{ game_libdir.owner }}"
             group: "{{ game_libdir.owner }}"
             state: directory
             mode: 0755
             
        - name: copy lib for df_game
          copy:
            src: home/arad/game/lib/libnxencryption.so
            dest: "{{ game_libdir.path }}/libnxencryption.so"
            owner: "{{ game_libdir.owner }}"
            group: "{{ game_libdir.owner }}"
            mode: 0755
             
        - name: create sym link to libnxencryption
          file:
            src: "{{ game_libdir.path }}/libnxencryption.so"
            dest: /usr/lib/libnxencryption.so
            owner: root
            group: root
            state: link
      tags: df_game_settings
      
    - name: ODBC settings
      block:
        - name: search location of libodbc
          find:
            paths: "/usr/lib64"
            patterns: 'libodbc.so*'
            follow: yes
          register: odbc
          
        - name: create sym link to libodbc
          file:
            src: "{{ odbc.files[0].path }}"
            dest: /usr/lib64/libodbc.so.1
            owner: root
            group: root
            state: link
          when: odbc.files
            
        - name: search location of libtdsodbc
          find:
            paths: "/usr/lib64"
            patterns: 'libtdsodbc.so*'
            follow: yes
          register: odbc_driver
          
        - name: search location of libtdsS
          find:
            paths: "/usr/lib64"
            patterns: 'libtdsS.so*'
          register: odbc_setup
          
        - name: copy the template file for driver setup
          template:
            src: tmp/driver.template.j2
            dest: /tmp/driver.template
            owner: root
            group: root
            
        - name: install the driver settings
          shell: odbcinst -i -d -f /tmp/driver.template
          
        - name: remove template file for driver setup
          file:
            path: /tmp/driver.template
            state: absent
      tags: odbc_settings
      
    - name: NGS settings
      block:
        - name: copy the rpm package
          copy:
            src: usr/local/src/ngserver-common-3.3.10-2.noarch.rpm
            dest: /tmp/ngserver-common-3.3.10-2.noarch.rpm
            owner: root
            group: root
            
        - name: copy the libNGServer64
          copy:
            src: "{{ ngslib.path64 | regex_replace('/((?:\\S+/)*\\S*)', '\\1') }}"
            dest: "{{ ngslib.path64 }}"
            owner: "{{ game_libdir.owner }}"
            group: "{{ game_libdir.owner }}"
            mode: 0775
            
        - name: install the rpm package
          yum:
            name: "/tmp/ngserver-common-3.3.10-2.noarch.rpm"
            state: present
            
        - name: create sym link to libNGServer
          file:
            src: "{{ ngslib.path64 }}"
            dest: "{{ ngslib.path64 | dirname }}/{{ ngslib.path64 | basename | regex_replace('([^0-9]+)\\d{2}(\\.so)', '\\1\\2')}}"
            owner: root
            group: root
            state: link
            
        - name: remove copied rpm package
          file:
            path: /tmp/ngserver-common-3.3.10-2.noarch.rpm
            state: absent
            
      tags: ngs_settings
  tags: game